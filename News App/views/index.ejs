
<style>
  /* Customize the appearance of the carousel */
  .carousel-item img {
    max-height: 400px; /* Set maximum height for images */
    object-fit: cover; /* Cover the entire carousel item with the image */
  }

  /* Style the carousel caption */
  .carousel-caption {
    
    color: white; /* White text color */
    padding: 20px; /* Add padding for better readability */
    border-radius: 5px; /* Add border radius for rounded corners */
  }

  .carousel-caption h5 {
    font-size: 1rem; /* Adjust font size of title */
    font-weight: bold; /* Make the title bold */
  }

  .carousel-caption p {
    font-size: 1rem; /* Adjust font size of summary */
  }

  /* Style the carousel indicators */
  .carousel-indicators {
    bottom: 20px; /* Adjust position of indicators */
  }

  .carousel-indicators button {
    background-color: #fff; /* Set background color of indicators */
    border: none; /* Remove border */
    width: 10px; /* Set width of indicators */
    height: 10px; /* Set height of indicators */
    border-radius: 50%; /* Make indicators circular */
    margin: 0 5px; /* Add margin between indicators */
  }

  .carousel-indicators .active {
    background-color: #275485; /* Set background color of active indicator */
  }
  /* Customize the appearance of the description container */
  #carouselContentContainer {
    background-color: rgba(0, 0, 0, 0.7); /* Semi-transparent black background */
    color: white; /* White text color */
    padding: 10px; /* Add padding for better readability */
    border-radius: 5px; /* Add border radius for rounded corners */
    margin-top: 20px; /* Add some space between carousel and description container */
  }

  /* Style the title and date */
  #contentTitle {
    font-size: 1.5rem; /* Adjust font size as needed */
    font-weight: bold; /* Make the title bold */
    margin-bottom: 5px; /* Add some space between title and date */
  }

  #contentDate {
    font-size: 1rem; /* Adjust font size as needed */
    font-style: italic; /* Italicize the date */
  }
  #weather-info {
    background-image: url('/img/weather.jpg'); 
    background-size: cover; /* Cover the entire area */
    background-position: center; /* Center the background image */
    color: #1f6c9c; /* White text color */
    padding: 20px; /* Add padding for better readability */
    border-radius: 10px; /* Add border radius for rounded corners */
    margin-top: 20px; /* Add some space between carousel and weather info */
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Add a shadow for depth */
    display: flex; /* Display children in a row */
    justify-content: space-between; /* Space evenly between children */
    align-items: center; /* Center vertically */
    font-weight: bold;
    font-size: 1.5rem;
  }

  .weather-item {
    flex: 1; /* Take up equal space */
    padding: 10px; /* Add padding for each item */
    border: 1px solid #ccc; /* Add border */
    border-radius: 5px; /* Add border radius */
    margin-right: 10px; /* Add margin between items */
    background-color: rgba(116, 113, 135, 0.8); /* Semi-transparent white background */
  }

  .weather-item:last-child {
    margin-right: 0; /* Remove margin for the last item */
  }

  .weather-item p {
    margin: 5px 0; /* Add some margin for better spacing */
  }
</style>
<div id="weather-info" class="d-none d-md-flex">
  <div class="weather-item">
    <h3>Location:</h3>
    <p id="weather-location"></p>
  </div>
  <div class="weather-item">
    <h3>Temperature:</h3>
    <p id="weather-temp"></p>
  </div>
  <div class="weather-item">
    <h3>Weather:</h3>
    <p id="weather-description"></p>
  </div>
</div>
<h1></h1>
<div id="carouselExampleCaptions" class="carousel slide">
    <div class="carousel-indicators">
      <button type="button" data-bs-target="#carouselExampleCaptions" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
      <button type="button" data-bs-target="#carouselExampleCaptions" data-bs-slide-to="1" aria-label="Slide 2"></button>
      <button type="button" data-bs-target="#carouselExampleCaptions" data-bs-slide-to="2" aria-label="Slide 3"></button>
    </div>
    <div class="carousel-inner">

 <% slides.forEach((slide, index) => { %>
      <div class="carousel-item <%= index === 0 ? 'active' : '' %>">
        <img src="<%=slide.imageUrl%>" class="d-block w-100" alt="...">
        <div class="carousel-caption d-none d-md-block">
          <h5><%=slide.title%></h5>
          <p><%=slide.summary%></p>
        </div>
      </div>

<% }); %>
    </div>
    <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleCaptions" data-bs-slide="prev">
      <span class="carousel-control-prev-icon" aria-hidden="true"></span>
      <span class="visually-hidden">Previous</span>
    </button>
    <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleCaptions" data-bs-slide="next">
      <span class="carousel-control-next-icon" aria-hidden="true"></span>
      <span class="visually-hidden">Next</span>
    </button>
  </div>

<% /* Your carousel code */ %>

<!-- Container for content related to the current carousel image -->
<div id="carouselContentContainer">
    <!-- <h2>Content Related to Current Carousel Image</h2> -->
    <div id="contentTitle"></div>
    <div id="contentDate"></div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

<!-- Initialize the Carousel after the document is fully loaded -->
<script>
    // Manually serialize the slides array to exclude ObjectId objects
    var slidesData = '<%- JSON.stringify(slides.map(slide => ({ title: slide.title, summary: slide.summary ,description:slide.description, date:slide.date}))) %>';

    document.addEventListener('DOMContentLoaded', function() {
        var carouselElement = document.getElementById('carouselExampleCaptions');
        var contentTitle = document.getElementById('contentTitle');
        var contentDate = document.getElementById('contentDate');

        var myCarousel = new bootstrap.Carousel(carouselElement);

        carouselElement.addEventListener('slide.bs.carousel', function(event) {
            var currentIndex = event.to;
            var currentSlide = JSON.parse(slidesData)[currentIndex];

            contentTitle.innerText = currentSlide.description;
            contentDate.innerText=currentSlide.date;
            
        });
        fetchWeatherData();
    });
</script>
<script>
  // Function to fetch weather data from OpenWeatherMap API
  async function fetchWeatherData() {
    try {
        // Get user's current location
        const position = await getCurrentLocation();
        console.log('Latitude:', position.coords.latitude);
        console.log('Longitude:', position.coords.longitude);
        const { latitude, longitude } = position.coords;

        // Make API request to OpenWeatherMap
        const apiKey = '93af05ffe0a5b6f4f1e89d1738872e75';
        const apiUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${apiKey}&units=metric`;

        // Fetch weather data
        const response = await fetch(apiUrl);
        const data = await response.json();

        // Display weather information
        const weatherInfoContainer = document.getElementById('weather-info');
        weatherInfoContainer.innerHTML = `
            <h3>Weather Information</h3>
            <p>Location: ${data.name}</p>
            <p>Temperature: ${data.main.temp} Â°C</p>
            <p>Weather: ${data.weather[0].description}</p>
        `;
    } catch (error) {
        // Handle error
        console.error('Error fetching weather data:', error.message);
        const weatherInfoContainer = document.getElementById('weather-info');
        weatherInfoContainer.innerHTML = '<p>Error fetching weather data. Please try again later.</p>';
    }
}
function getCurrentLocation() {
            return new Promise((resolve, reject) => {
                if ('geolocation' in navigator) {
                    navigator.geolocation.getCurrentPosition(resolve, reject);
                } else {
                    reject(new Error('Geolocation is not supported by your browser.'));
                }
            });
        }

</script>